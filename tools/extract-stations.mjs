// One-off extractor: reads apps/frontend/src/assets/map.svg and writes
// packages/station-data/src/station-positions.ts with cx/cy and label coords.
import { readFileSync, writeFileSync, existsSync } from 'node:fs';

const CANDIDATES = ['tools/assets/map.svg', 'apps/frontend/src/assets/map.svg'];
const SRC = CANDIDATES.find((p) => existsSync(p));
if (!SRC) {
  console.error('No source SVG found. Expected at:', CANDIDATES.join(', '));
  process.exit(1);
}
const OUT = 'packages/station-data/src/station-positions.ts';

const svg = readFileSync(SRC, 'utf8');

const groupRe = /<g[^>]*data-stationid="([^"]+)"[^>]*>([\s\S]*?)<\/g>/g;
const circleRe = /<circle[^>]*\bcx="([0-9.]+)"[^>]*\bcy="([0-9.]+)"[^>]*>/i;
const labelRe = /<(tspan|text)[^>]*\bx="([0-9.]+)"[^>]*\by="([0-9.]+)"[^>]*>/i;

const out = {};
let m;
while ((m = groupRe.exec(svg))) {
  const id = m[1];
  const inner = m[2];
  const c = circleRe.exec(inner);
  const l = labelRe.exec(inner);
  if (!c) continue;
  const cx = parseFloat(c[1]);
  const cy = parseFloat(c[2]);
  const labelX = l ? parseFloat(l[2]) : cx + 8;
  const labelY = l ? parseFloat(l[3]) : cy - 8;
  out[id] = { cx, cy, labelX, labelY };
}

const header = `// Auto-generated by tools/extract-stations.mjs\n`;
const body = `export const stationPositions: Record<string, { cx: number; cy: number; labelX: number; labelY: number }> = ${JSON.stringify(out, null, 2)};\n`;
writeFileSync(OUT, header + body, 'utf8');
console.log(`Wrote ${OUT} with ${Object.keys(out).length} entries`);
